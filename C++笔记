ival = static_cast< int >( 3.541 ) + 3; 强制类型转换

catch()
throw(string err)
assert(expression);

multimap
智能指针
shared_ptr<string> p1=make_shared<string>("abcd");//指向字符串的指针
unique_ptr<int> p3=make_unique<int>(3);
shared_ptr<list<int>> p2;
shared_ptr<int> p2(new int(1024));//正确：使用了直接初始化形式
p.reset(new int(1024));//正确。p指向一个新对象
//将所有权从p1（指向string Stegosaurus）转移给p2
unique_ptr<string> p2(p1.release());//release将p1置为空
unique_ptr<string>p3(new string("Trex"));
//将所有权从p3转移到p2
p2.reset(p3.release());//reset释放了p2原来指向的内存


override 关键字，可以避免派生类中忘记重写虚函数的错误

类之间的关系：
纵向：继承、实现
横向：依赖 < 关联 < 聚合 < 组合（强弱关系）

省略号挂起类型检查机制 它们的出现告知编译器 当函数被调用时 可以有 0 个或多 个实参 而实参的类型未知 省略号有下列两种形式 
void foo( parm_list, ... ); void foo( ... ); 

 inline 函数必须在调用该函数的每个文本文件中定义，方法建议把 inline 函数的定义放到头文件中 在每个调用该 inline 函数的文件中包含该头文件 
 
 int (*pf)( const string &, const string & ); // ok: 正确 指向函数的指针
 
  寄存器自动对象     在函数中频繁被使用的自动变量可以用 register 声明 
  for ( register int ix = 0; ix < sz; ++ix ) // ... 
   auto_ptr 对象被初始化为指向由 new 表达式创建的动态分配对象 当 auto_ptr 对象的生 命期结束时 动态分配的对象被自动释放 
   #include <memory> 
   
   定位 new 表达式 
   // 预分配内存 但没有Foo对象 
   char *buf = new char[ sizeof(Foo) * chunk ];
   // 在buf中创建一个Foo对象  
   Foo *pb = new (buf) Foo;
   
   嵌套名字空间cplusplus_primer::MatrixLib::matrix 
   可以用未命名的名字空间 unnamed namespace 声明一个局部于某一文 件的实体
   // ----- SortLib.C ----- 
   namespace {  void swap( double *d1, double *d2 ) { /* ... */ } } 
  函数 swap()只在文件 SortLib.C 中可见 
  
  // swap() 在其他程序中不可见 
  static void swap( double *d1, double *d2 ) { /* ... */ } 
  
  namespace International_Business_Machines  { /* ... */ }
  namespace IBM = International_Business_Machines; 
  
  因为每个类都维持着自己的一个域 所以两 个不同类的成员函数不能相互重载
   1 确定函数调用考虑的重载函数的集合 确定函数调用中实参表的属性     2 从重载函数集合中选择函数 该函数可以在 给出实参个数和类型 的情况下用调用 中指定的实参进行调用     3 选择与调用最匹配的函数     下面我们将按顺序查看每一
  找到最佳匹配函数
  模板类型参数由关键字 class 或 typename 后加一个标识符构成 在函数的模板参数表中 这两个关键字的意义相同 
  通过在模板定义中的关键字 template 之前加上关键字 export 来声明一个可导出的 函数模板 
  
  Unix五种io模型Blocking IO 阻塞IO
  2，Non Blocking IO  非阻塞IO
  3，IO 多路复用
  4，信号驱动IO
  5，异步IO
  
  由于在shared_ptr单独使用的时候会出现循环引用的问题，造成内存泄漏，所以标准库又从boost库当中引入了weak_ptr。
  
  DNS区域传输的时候使用TCP协议：
  域名解析时使用UDP协议：

数据发送时，由上层向下层封装。
四层，协议层传输的是数据报文，主要是协议格式；
三层，网络层传输的是数据包，包含数据报文，并且增加传输使用的IP地址等三层信息；
二层，数据链路层传输的是数据帧，包含数据包，并且增加相应MAC地址与二层信息。
数据接收的时候，下层向上层解封装。
具体区别就是所工作的层不同，可根据ISO七层模型或者TCP/IP四层模型理解。

用模板具体化解决模板的局限性（参数类型为数组或自定义类）

异常处理
for ( int ix = 1; ix < 51; ++ix ) {  
    try { // pushOnFull 异常的 try 块   
        if ( ix % 3 == 0 )    
        stack.push( ix );  }  
        catch ( pushOnFull ) { ... }  
        if ( ix % 4 == 0 )   
            stack.display(); 
        try { // popOnEmpty 异常的 try 块   
        if ( ix % 10 == 0 ) {    
            int dummy;    
            stack.pop( dummy );    
            stack.display();  
            }  
           }  
            catch ( popOnEmpty ) { ... } }
  
  throw像return
            
基类异常可以处理其子类类型的异常

runtime error: reference binding to null pointer of type 'struct value_type' (stl_vector.h)

指针越界，一个空二维数组matrix={{}}
vector<vector<int >> sum=(matrix.size(),vector<int>(matrix[0].size(),0));//error there's no matrix[0] at all
solution:
int row=matrix.size();
int col=row>0?matrix[0].size():0;
vector<vector<int >> sum=(row,vector<int>(col,0));

heap buffer overflow
指针越界

heap buffer overflow
递归函数没有出口

runtime error: member access within null pointer of type 'struct ListNode'
使用了空指针的->next

单例

class CSingleton {
private:
	CSingleton(){}
	static CSingleton* m_pinstance;
public:
	static CSingleton* getinstance() {
		if (m_pinstance == NULL)
			m_pinstance = new CSingleton();
		return m_pinstance;
	}
};
CSingleton* CSingleton::m_pinstance = NULL;

进程
std::mutex mutex_;
std::condition_variable condVar;

void doTheWork() {
	std::cout << "Processing shared data." << std::endl;//3
}

void waitingForWork() {//t1
	std::cout << "Worker: Waiting for work." << std::endl; //1

	std::unique_lock<std::mutex> lck(mutex_);
	condVar.wait(lck);
	doTheWork();
	std::cout << "Work done." << std::endl;//4
}

void setDataReady() {//t2
	std::cout << "Sender: Data is ready." << std::endl;//2
	condVar.notify_one();
}

std::thread t1(waitingForWork);
std::thread t2(setDataReady);

	t1.join();
	t2.join();


所有对象放在堆中，方法和方法中的形参和局部变量放在栈中

减少复杂度方法：
。考虑dp算法
。F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1]
F(k-1) = 0 * Bk-1[0] + 1 * Bk-1[1] + ... + (n-1) * Bk-1[n-1]
       = 0 * Bk[1] + 1 * Bk[2] + ... + (n-2) * Bk[n-1] + (n-1) * Bk[0]
Then,

F(k) - F(k-1) = Bk[1] + Bk[2] + ... + Bk[n-1] + (1-n)Bk[0]
              = (Bk[0] + ... + Bk[n-1]) - nBk[0]
              = sum - nBk[0]
Thus,

F(k) = F(k-1) + sum - nBk[0]
考虑利用之前的结果，类似于递归公式
。

问有多少种路径可以用dp优化dfsQ63




之前有多少个连续的小于X（当前值），求多少个单调值的，用栈，单调栈

Boyer–Moore majority vote algorithm
摩尔投票法
    public int majorityElement(int[] nums) {

        int major=nums[0], count = 1;
        for(int i=1; i<nums.length;i++){
            if(count==0){
                count++;
                major=nums[i];
            }else if(major==nums[i]){
                count++;
            }else count--;

        }
        return major;
    }

一个数组中众数出现频率大于0.5可以用roll一个随机数来确定该众数，定一个上限20次来限制出错概率小于1E-6

构造函数可以跟个:再跟上构造function(int[] arr):a(arr){}

超强万能引用
const auto& vec=iter->second;

求第k大数或者中位数，维护一个堆就行
